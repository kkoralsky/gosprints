// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sprints.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	sprints.proto

It has these top-level messages:
	Empty
	AbortMessage
	Race
	DefinedRace
	Results
	Result
	Tournaments
	TournamentNames
	TournamentSpec
	DefinedPlayer
	ResultSpec
	Player
	Starter
	Racer
	Tournament
	VisConfiguration
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Gender int32

const (
	Gender_MALE   Gender = 0
	Gender_FEMALE Gender = 1
	Gender_OTHER  Gender = 2
)

var Gender_name = map[int32]string{
	0: "MALE",
	1: "FEMALE",
	2: "OTHER",
}
var Gender_value = map[string]int32{
	"MALE":   0,
	"FEMALE": 1,
	"OTHER":  2,
}

func (x Gender) String() string {
	return proto.EnumName(Gender_name, int32(x))
}
func (Gender) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Tournament_TournamentMode int32

const (
	Tournament_DISTANCE Tournament_TournamentMode = 0
	Tournament_TIME     Tournament_TournamentMode = 1
)

var Tournament_TournamentMode_name = map[int32]string{
	0: "DISTANCE",
	1: "TIME",
}
var Tournament_TournamentMode_value = map[string]int32{
	"DISTANCE": 0,
	"TIME":     1,
}

func (x Tournament_TournamentMode) String() string {
	return proto.EnumName(Tournament_TournamentMode_name, int32(x))
}
func (Tournament_TournamentMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{14, 0}
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type AbortMessage struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *AbortMessage) Reset()                    { *m = AbortMessage{} }
func (m *AbortMessage) String() string            { return proto.CompactTextString(m) }
func (*AbortMessage) ProtoMessage()               {}
func (*AbortMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AbortMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Race struct {
	Players   []*Player `protobuf:"bytes,1,rep,name=players" json:"players,omitempty"`
	DestValue uint32    `protobuf:"varint,2,opt,name=destValue" json:"destValue,omitempty"`
}

func (m *Race) Reset()                    { *m = Race{} }
func (m *Race) String() string            { return proto.CompactTextString(m) }
func (*Race) ProtoMessage()               {}
func (*Race) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Race) GetPlayers() []*Player {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *Race) GetDestValue() uint32 {
	if m != nil {
		return m.DestValue
	}
	return 0
}

type DefinedRace struct {
	// how many races are remaining before this one will take place
	RacesRemaining uint32           `protobuf:"varint,1,opt,name=racesRemaining" json:"racesRemaining,omitempty"`
	Player         []*DefinedPlayer `protobuf:"bytes,2,rep,name=player" json:"player,omitempty"`
}

func (m *DefinedRace) Reset()                    { *m = DefinedRace{} }
func (m *DefinedRace) String() string            { return proto.CompactTextString(m) }
func (*DefinedRace) ProtoMessage()               {}
func (*DefinedRace) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DefinedRace) GetRacesRemaining() uint32 {
	if m != nil {
		return m.RacesRemaining
	}
	return 0
}

func (m *DefinedRace) GetPlayer() []*DefinedPlayer {
	if m != nil {
		return m.Player
	}
	return nil
}

type Results struct {
	Result []*Result `protobuf:"bytes,1,rep,name=result" json:"result,omitempty"`
}

func (m *Results) Reset()                    { *m = Results{} }
func (m *Results) String() string            { return proto.CompactTextString(m) }
func (*Results) ProtoMessage()               {}
func (*Results) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Results) GetResult() []*Result {
	if m != nil {
		return m.Result
	}
	return nil
}

type Result struct {
	Player    *Player `protobuf:"bytes,1,opt,name=player" json:"player,omitempty"`
	Result    float32 `protobuf:"fixed32,2,opt,name=result" json:"result,omitempty"`
	DestValue uint32  `protobuf:"varint,3,opt,name=destValue" json:"destValue,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Result) GetPlayer() *Player {
	if m != nil {
		return m.Player
	}
	return nil
}

func (m *Result) GetResult() float32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *Result) GetDestValue() uint32 {
	if m != nil {
		return m.DestValue
	}
	return 0
}

type Tournaments struct {
	Tournament []*Tournament `protobuf:"bytes,1,rep,name=tournament" json:"tournament,omitempty"`
}

func (m *Tournaments) Reset()                    { *m = Tournaments{} }
func (m *Tournaments) String() string            { return proto.CompactTextString(m) }
func (*Tournaments) ProtoMessage()               {}
func (*Tournaments) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Tournaments) GetTournament() []*Tournament {
	if m != nil {
		return m.Tournament
	}
	return nil
}

type TournamentNames struct {
	Name []string `protobuf:"bytes,1,rep,name=name" json:"name,omitempty"`
}

func (m *TournamentNames) Reset()                    { *m = TournamentNames{} }
func (m *TournamentNames) String() string            { return proto.CompactTextString(m) }
func (*TournamentNames) ProtoMessage()               {}
func (*TournamentNames) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *TournamentNames) GetName() []string {
	if m != nil {
		return m.Name
	}
	return nil
}

type TournamentSpec struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *TournamentSpec) Reset()                    { *m = TournamentSpec{} }
func (m *TournamentSpec) String() string            { return proto.CompactTextString(m) }
func (*TournamentSpec) ProtoMessage()               {}
func (*TournamentSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *TournamentSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type DefinedPlayer struct {
	Color           string           `protobuf:"bytes,1,opt,name=color" json:"color,omitempty"`
	RacesRemaining  uint32           `protobuf:"varint,2,opt,name=racesRemaining" json:"racesRemaining,omitempty"`
	OtherContenders []*DefinedPlayer `protobuf:"bytes,3,rep,name=otherContenders" json:"otherContenders,omitempty"`
}

func (m *DefinedPlayer) Reset()                    { *m = DefinedPlayer{} }
func (m *DefinedPlayer) String() string            { return proto.CompactTextString(m) }
func (*DefinedPlayer) ProtoMessage()               {}
func (*DefinedPlayer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *DefinedPlayer) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

func (m *DefinedPlayer) GetRacesRemaining() uint32 {
	if m != nil {
		return m.RacesRemaining
	}
	return 0
}

func (m *DefinedPlayer) GetOtherContenders() []*DefinedPlayer {
	if m != nil {
		return m.OtherContenders
	}
	return nil
}

type ResultSpec struct {
	Gender         Gender `protobuf:"varint,1,opt,name=gender,enum=pb.Gender" json:"gender,omitempty"`
	Last           uint32 `protobuf:"varint,2,opt,name=last" json:"last,omitempty"`
	TournamentName string `protobuf:"bytes,3,opt,name=tournamentName" json:"tournamentName,omitempty"`
}

func (m *ResultSpec) Reset()                    { *m = ResultSpec{} }
func (m *ResultSpec) String() string            { return proto.CompactTextString(m) }
func (*ResultSpec) ProtoMessage()               {}
func (*ResultSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ResultSpec) GetGender() Gender {
	if m != nil {
		return m.Gender
	}
	return Gender_MALE
}

func (m *ResultSpec) GetLast() uint32 {
	if m != nil {
		return m.Last
	}
	return 0
}

func (m *ResultSpec) GetTournamentName() string {
	if m != nil {
		return m.TournamentName
	}
	return ""
}

type Player struct {
	Name   string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Gender Gender `protobuf:"varint,2,opt,name=gender,enum=pb.Gender" json:"gender,omitempty"`
}

func (m *Player) Reset()                    { *m = Player{} }
func (m *Player) String() string            { return proto.CompactTextString(m) }
func (*Player) ProtoMessage()               {}
func (*Player) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Player) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Player) GetGender() Gender {
	if m != nil {
		return m.Gender
	}
	return Gender_MALE
}

type Starter struct {
	CountdownTime uint32 `protobuf:"varint,1,opt,name=countdownTime" json:"countdownTime,omitempty"`
}

func (m *Starter) Reset()                    { *m = Starter{} }
func (m *Starter) String() string            { return proto.CompactTextString(m) }
func (*Starter) ProtoMessage()               {}
func (*Starter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Starter) GetCountdownTime() uint32 {
	if m != nil {
		return m.CountdownTime
	}
	return 0
}

type Racer struct {
	PlayerNum uint32 `protobuf:"varint,1,opt,name=playerNum" json:"playerNum,omitempty"`
	Distance  uint32 `protobuf:"varint,2,opt,name=distance" json:"distance,omitempty"`
}

func (m *Racer) Reset()                    { *m = Racer{} }
func (m *Racer) String() string            { return proto.CompactTextString(m) }
func (*Racer) ProtoMessage()               {}
func (*Racer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Racer) GetPlayerNum() uint32 {
	if m != nil {
		return m.PlayerNum
	}
	return 0
}

func (m *Racer) GetDistance() uint32 {
	if m != nil {
		return m.Distance
	}
	return 0
}

type Tournament struct {
	Name        string                    `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	DestValue   uint32                    `protobuf:"varint,3,opt,name=destValue" json:"destValue,omitempty"`
	Mode        Tournament_TournamentMode `protobuf:"varint,4,opt,name=mode,enum=pb.Tournament_TournamentMode" json:"mode,omitempty"`
	PlayerCount uint32                    `protobuf:"varint,5,opt,name=playerCount" json:"playerCount,omitempty"`
	Color       []string                  `protobuf:"bytes,6,rep,name=color" json:"color,omitempty"`
	Result      []*Result                 `protobuf:"bytes,7,rep,name=result" json:"result,omitempty"`
}

func (m *Tournament) Reset()                    { *m = Tournament{} }
func (m *Tournament) String() string            { return proto.CompactTextString(m) }
func (*Tournament) ProtoMessage()               {}
func (*Tournament) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Tournament) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Tournament) GetDestValue() uint32 {
	if m != nil {
		return m.DestValue
	}
	return 0
}

func (m *Tournament) GetMode() Tournament_TournamentMode {
	if m != nil {
		return m.Mode
	}
	return Tournament_DISTANCE
}

func (m *Tournament) GetPlayerCount() uint32 {
	if m != nil {
		return m.PlayerCount
	}
	return 0
}

func (m *Tournament) GetColor() []string {
	if m != nil {
		return m.Color
	}
	return nil
}

func (m *Tournament) GetResult() []*Result {
	if m != nil {
		return m.Result
	}
	return nil
}

type VisConfiguration struct {
	HostName         string `protobuf:"bytes,1,opt,name=hostName" json:"hostName,omitempty"`
	VisName          string `protobuf:"bytes,2,opt,name=visName" json:"visName,omitempty"`
	Fullscreen       bool   `protobuf:"varint,3,opt,name=fullscreen" json:"fullscreen,omitempty"`
	ResolutionWidth  uint32 `protobuf:"varint,4,opt,name=resolutionWidth" json:"resolutionWidth,omitempty"`
	ResolutionHeight uint32 `protobuf:"varint,5,opt,name=resolutionHeight" json:"resolutionHeight,omitempty"`
	MovingUnit       uint32 `protobuf:"varint,6,opt,name=movingUnit" json:"movingUnit,omitempty"`
	DistFactor       uint32 `protobuf:"varint,7,opt,name=distFactor" json:"distFactor,omitempty"`
}

func (m *VisConfiguration) Reset()                    { *m = VisConfiguration{} }
func (m *VisConfiguration) String() string            { return proto.CompactTextString(m) }
func (*VisConfiguration) ProtoMessage()               {}
func (*VisConfiguration) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *VisConfiguration) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *VisConfiguration) GetVisName() string {
	if m != nil {
		return m.VisName
	}
	return ""
}

func (m *VisConfiguration) GetFullscreen() bool {
	if m != nil {
		return m.Fullscreen
	}
	return false
}

func (m *VisConfiguration) GetResolutionWidth() uint32 {
	if m != nil {
		return m.ResolutionWidth
	}
	return 0
}

func (m *VisConfiguration) GetResolutionHeight() uint32 {
	if m != nil {
		return m.ResolutionHeight
	}
	return 0
}

func (m *VisConfiguration) GetMovingUnit() uint32 {
	if m != nil {
		return m.MovingUnit
	}
	return 0
}

func (m *VisConfiguration) GetDistFactor() uint32 {
	if m != nil {
		return m.DistFactor
	}
	return 0
}

func init() {
	proto.RegisterType((*Empty)(nil), "pb.Empty")
	proto.RegisterType((*AbortMessage)(nil), "pb.AbortMessage")
	proto.RegisterType((*Race)(nil), "pb.Race")
	proto.RegisterType((*DefinedRace)(nil), "pb.DefinedRace")
	proto.RegisterType((*Results)(nil), "pb.Results")
	proto.RegisterType((*Result)(nil), "pb.Result")
	proto.RegisterType((*Tournaments)(nil), "pb.Tournaments")
	proto.RegisterType((*TournamentNames)(nil), "pb.TournamentNames")
	proto.RegisterType((*TournamentSpec)(nil), "pb.TournamentSpec")
	proto.RegisterType((*DefinedPlayer)(nil), "pb.DefinedPlayer")
	proto.RegisterType((*ResultSpec)(nil), "pb.ResultSpec")
	proto.RegisterType((*Player)(nil), "pb.Player")
	proto.RegisterType((*Starter)(nil), "pb.Starter")
	proto.RegisterType((*Racer)(nil), "pb.Racer")
	proto.RegisterType((*Tournament)(nil), "pb.Tournament")
	proto.RegisterType((*VisConfiguration)(nil), "pb.VisConfiguration")
	proto.RegisterEnum("pb.Gender", Gender_name, Gender_value)
	proto.RegisterEnum("pb.Tournament_TournamentMode", Tournament_TournamentMode_name, Tournament_TournamentMode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Sprints service

type SprintsClient interface {
	NewTournament(ctx context.Context, in *Tournament, opts ...grpc.CallOption) (*Tournament, error)
	NewRace(ctx context.Context, in *Race, opts ...grpc.CallOption) (*Empty, error)
	StartRace(ctx context.Context, in *Starter, opts ...grpc.CallOption) (*Player, error)
	AbortRace(ctx context.Context, in *AbortMessage, opts ...grpc.CallOption) (*Empty, error)
	ConfigureVis(ctx context.Context, in *VisConfiguration, opts ...grpc.CallOption) (*Empty, error)
	GetResults(ctx context.Context, in *ResultSpec, opts ...grpc.CallOption) (Sprints_GetResultsClient, error)
	GetTournamentNames(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TournamentNames, error)
	GetCurrentTournament(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Tournament, error)
	LoadTournament(ctx context.Context, in *TournamentSpec, opts ...grpc.CallOption) (*Tournament, error)
	ShowResults(ctx context.Context, in *ResultSpec, opts ...grpc.CallOption) (*Empty, error)
}

type sprintsClient struct {
	cc *grpc.ClientConn
}

func NewSprintsClient(cc *grpc.ClientConn) SprintsClient {
	return &sprintsClient{cc}
}

func (c *sprintsClient) NewTournament(ctx context.Context, in *Tournament, opts ...grpc.CallOption) (*Tournament, error) {
	out := new(Tournament)
	err := grpc.Invoke(ctx, "/pb.Sprints/NewTournament", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sprintsClient) NewRace(ctx context.Context, in *Race, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.Sprints/NewRace", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sprintsClient) StartRace(ctx context.Context, in *Starter, opts ...grpc.CallOption) (*Player, error) {
	out := new(Player)
	err := grpc.Invoke(ctx, "/pb.Sprints/StartRace", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sprintsClient) AbortRace(ctx context.Context, in *AbortMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.Sprints/AbortRace", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sprintsClient) ConfigureVis(ctx context.Context, in *VisConfiguration, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.Sprints/ConfigureVis", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sprintsClient) GetResults(ctx context.Context, in *ResultSpec, opts ...grpc.CallOption) (Sprints_GetResultsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Sprints_serviceDesc.Streams[0], c.cc, "/pb.Sprints/GetResults", opts...)
	if err != nil {
		return nil, err
	}
	x := &sprintsGetResultsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Sprints_GetResultsClient interface {
	Recv() (*Result, error)
	grpc.ClientStream
}

type sprintsGetResultsClient struct {
	grpc.ClientStream
}

func (x *sprintsGetResultsClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sprintsClient) GetTournamentNames(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TournamentNames, error) {
	out := new(TournamentNames)
	err := grpc.Invoke(ctx, "/pb.Sprints/GetTournamentNames", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sprintsClient) GetCurrentTournament(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Tournament, error) {
	out := new(Tournament)
	err := grpc.Invoke(ctx, "/pb.Sprints/GetCurrentTournament", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sprintsClient) LoadTournament(ctx context.Context, in *TournamentSpec, opts ...grpc.CallOption) (*Tournament, error) {
	out := new(Tournament)
	err := grpc.Invoke(ctx, "/pb.Sprints/LoadTournament", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sprintsClient) ShowResults(ctx context.Context, in *ResultSpec, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.Sprints/ShowResults", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Sprints service

type SprintsServer interface {
	NewTournament(context.Context, *Tournament) (*Tournament, error)
	NewRace(context.Context, *Race) (*Empty, error)
	StartRace(context.Context, *Starter) (*Player, error)
	AbortRace(context.Context, *AbortMessage) (*Empty, error)
	ConfigureVis(context.Context, *VisConfiguration) (*Empty, error)
	GetResults(*ResultSpec, Sprints_GetResultsServer) error
	GetTournamentNames(context.Context, *Empty) (*TournamentNames, error)
	GetCurrentTournament(context.Context, *Empty) (*Tournament, error)
	LoadTournament(context.Context, *TournamentSpec) (*Tournament, error)
	ShowResults(context.Context, *ResultSpec) (*Empty, error)
}

func RegisterSprintsServer(s *grpc.Server, srv SprintsServer) {
	s.RegisterService(&_Sprints_serviceDesc, srv)
}

func _Sprints_NewTournament_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tournament)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SprintsServer).NewTournament(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Sprints/NewTournament",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SprintsServer).NewTournament(ctx, req.(*Tournament))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sprints_NewRace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Race)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SprintsServer).NewRace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Sprints/NewRace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SprintsServer).NewRace(ctx, req.(*Race))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sprints_StartRace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Starter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SprintsServer).StartRace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Sprints/StartRace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SprintsServer).StartRace(ctx, req.(*Starter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sprints_AbortRace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SprintsServer).AbortRace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Sprints/AbortRace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SprintsServer).AbortRace(ctx, req.(*AbortMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sprints_ConfigureVis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VisConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SprintsServer).ConfigureVis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Sprints/ConfigureVis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SprintsServer).ConfigureVis(ctx, req.(*VisConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sprints_GetResults_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ResultSpec)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SprintsServer).GetResults(m, &sprintsGetResultsServer{stream})
}

type Sprints_GetResultsServer interface {
	Send(*Result) error
	grpc.ServerStream
}

type sprintsGetResultsServer struct {
	grpc.ServerStream
}

func (x *sprintsGetResultsServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func _Sprints_GetTournamentNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SprintsServer).GetTournamentNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Sprints/GetTournamentNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SprintsServer).GetTournamentNames(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sprints_GetCurrentTournament_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SprintsServer).GetCurrentTournament(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Sprints/GetCurrentTournament",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SprintsServer).GetCurrentTournament(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sprints_LoadTournament_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TournamentSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SprintsServer).LoadTournament(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Sprints/LoadTournament",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SprintsServer).LoadTournament(ctx, req.(*TournamentSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sprints_ShowResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResultSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SprintsServer).ShowResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Sprints/ShowResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SprintsServer).ShowResults(ctx, req.(*ResultSpec))
	}
	return interceptor(ctx, in, info, handler)
}

var _Sprints_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Sprints",
	HandlerType: (*SprintsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewTournament",
			Handler:    _Sprints_NewTournament_Handler,
		},
		{
			MethodName: "NewRace",
			Handler:    _Sprints_NewRace_Handler,
		},
		{
			MethodName: "StartRace",
			Handler:    _Sprints_StartRace_Handler,
		},
		{
			MethodName: "AbortRace",
			Handler:    _Sprints_AbortRace_Handler,
		},
		{
			MethodName: "ConfigureVis",
			Handler:    _Sprints_ConfigureVis_Handler,
		},
		{
			MethodName: "GetTournamentNames",
			Handler:    _Sprints_GetTournamentNames_Handler,
		},
		{
			MethodName: "GetCurrentTournament",
			Handler:    _Sprints_GetCurrentTournament_Handler,
		},
		{
			MethodName: "LoadTournament",
			Handler:    _Sprints_LoadTournament_Handler,
		},
		{
			MethodName: "ShowResults",
			Handler:    _Sprints_ShowResults_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetResults",
			Handler:       _Sprints_GetResults_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sprints.proto",
}

// Client API for Visual service

type VisualClient interface {
	NewTournament(ctx context.Context, in *Tournament, opts ...grpc.CallOption) (*Empty, error)
	NewRace(ctx context.Context, in *Race, opts ...grpc.CallOption) (*Empty, error)
	StartRace(ctx context.Context, in *Starter, opts ...grpc.CallOption) (*Empty, error)
	AbortRace(ctx context.Context, in *AbortMessage, opts ...grpc.CallOption) (*Empty, error)
	UpdateRace(ctx context.Context, opts ...grpc.CallOption) (Visual_UpdateRaceClient, error)
	FinishRace(ctx context.Context, in *Results, opts ...grpc.CallOption) (*Empty, error)
	ShowResults(ctx context.Context, in *Results, opts ...grpc.CallOption) (*Empty, error)
	ConfigureVis(ctx context.Context, in *VisConfiguration, opts ...grpc.CallOption) (*Empty, error)
	StopVis(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type visualClient struct {
	cc *grpc.ClientConn
}

func NewVisualClient(cc *grpc.ClientConn) VisualClient {
	return &visualClient{cc}
}

func (c *visualClient) NewTournament(ctx context.Context, in *Tournament, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.Visual/NewTournament", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visualClient) NewRace(ctx context.Context, in *Race, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.Visual/NewRace", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visualClient) StartRace(ctx context.Context, in *Starter, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.Visual/StartRace", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visualClient) AbortRace(ctx context.Context, in *AbortMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.Visual/AbortRace", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visualClient) UpdateRace(ctx context.Context, opts ...grpc.CallOption) (Visual_UpdateRaceClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Visual_serviceDesc.Streams[0], c.cc, "/pb.Visual/UpdateRace", opts...)
	if err != nil {
		return nil, err
	}
	x := &visualUpdateRaceClient{stream}
	return x, nil
}

type Visual_UpdateRaceClient interface {
	Send(*Racer) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type visualUpdateRaceClient struct {
	grpc.ClientStream
}

func (x *visualUpdateRaceClient) Send(m *Racer) error {
	return x.ClientStream.SendMsg(m)
}

func (x *visualUpdateRaceClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *visualClient) FinishRace(ctx context.Context, in *Results, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.Visual/FinishRace", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visualClient) ShowResults(ctx context.Context, in *Results, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.Visual/ShowResults", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visualClient) ConfigureVis(ctx context.Context, in *VisConfiguration, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.Visual/ConfigureVis", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visualClient) StopVis(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/pb.Visual/StopVis", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Visual service

type VisualServer interface {
	NewTournament(context.Context, *Tournament) (*Empty, error)
	NewRace(context.Context, *Race) (*Empty, error)
	StartRace(context.Context, *Starter) (*Empty, error)
	AbortRace(context.Context, *AbortMessage) (*Empty, error)
	UpdateRace(Visual_UpdateRaceServer) error
	FinishRace(context.Context, *Results) (*Empty, error)
	ShowResults(context.Context, *Results) (*Empty, error)
	ConfigureVis(context.Context, *VisConfiguration) (*Empty, error)
	StopVis(context.Context, *Empty) (*Empty, error)
}

func RegisterVisualServer(s *grpc.Server, srv VisualServer) {
	s.RegisterService(&_Visual_serviceDesc, srv)
}

func _Visual_NewTournament_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tournament)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisualServer).NewTournament(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Visual/NewTournament",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisualServer).NewTournament(ctx, req.(*Tournament))
	}
	return interceptor(ctx, in, info, handler)
}

func _Visual_NewRace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Race)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisualServer).NewRace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Visual/NewRace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisualServer).NewRace(ctx, req.(*Race))
	}
	return interceptor(ctx, in, info, handler)
}

func _Visual_StartRace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Starter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisualServer).StartRace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Visual/StartRace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisualServer).StartRace(ctx, req.(*Starter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Visual_AbortRace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisualServer).AbortRace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Visual/AbortRace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisualServer).AbortRace(ctx, req.(*AbortMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Visual_UpdateRace_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VisualServer).UpdateRace(&visualUpdateRaceServer{stream})
}

type Visual_UpdateRaceServer interface {
	SendAndClose(*Empty) error
	Recv() (*Racer, error)
	grpc.ServerStream
}

type visualUpdateRaceServer struct {
	grpc.ServerStream
}

func (x *visualUpdateRaceServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *visualUpdateRaceServer) Recv() (*Racer, error) {
	m := new(Racer)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Visual_FinishRace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Results)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisualServer).FinishRace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Visual/FinishRace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisualServer).FinishRace(ctx, req.(*Results))
	}
	return interceptor(ctx, in, info, handler)
}

func _Visual_ShowResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Results)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisualServer).ShowResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Visual/ShowResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisualServer).ShowResults(ctx, req.(*Results))
	}
	return interceptor(ctx, in, info, handler)
}

func _Visual_ConfigureVis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VisConfiguration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisualServer).ConfigureVis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Visual/ConfigureVis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisualServer).ConfigureVis(ctx, req.(*VisConfiguration))
	}
	return interceptor(ctx, in, info, handler)
}

func _Visual_StopVis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisualServer).StopVis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Visual/StopVis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisualServer).StopVis(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Visual_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Visual",
	HandlerType: (*VisualServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewTournament",
			Handler:    _Visual_NewTournament_Handler,
		},
		{
			MethodName: "NewRace",
			Handler:    _Visual_NewRace_Handler,
		},
		{
			MethodName: "StartRace",
			Handler:    _Visual_StartRace_Handler,
		},
		{
			MethodName: "AbortRace",
			Handler:    _Visual_AbortRace_Handler,
		},
		{
			MethodName: "FinishRace",
			Handler:    _Visual_FinishRace_Handler,
		},
		{
			MethodName: "ShowResults",
			Handler:    _Visual_ShowResults_Handler,
		},
		{
			MethodName: "ConfigureVis",
			Handler:    _Visual_ConfigureVis_Handler,
		},
		{
			MethodName: "StopVis",
			Handler:    _Visual_StopVis_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UpdateRace",
			Handler:       _Visual_UpdateRace_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "sprints.proto",
}

func init() { proto.RegisterFile("sprints.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 924 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0xc6, 0x6e, 0x63, 0xc7, 0x27, 0x4d, 0x1a, 0x86, 0x0a, 0x59, 0x11, 0x2c, 0x95, 0xc9, 0x22,
	0x6f, 0x25, 0x5a, 0xb6, 0xec, 0x1d, 0x42, 0xa2, 0xca, 0xa6, 0xdd, 0x45, 0xdb, 0x80, 0x9c, 0x6c,
	0xb9, 0xc5, 0xb1, 0xa7, 0xc9, 0x48, 0xce, 0x8c, 0x35, 0x33, 0xde, 0x6a, 0x5f, 0x81, 0xa7, 0xe3,
	0x31, 0x78, 0x03, 0xee, 0x10, 0x9a, 0xb1, 0x13, 0x8f, 0x4d, 0xc3, 0xc2, 0xdd, 0x9c, 0x73, 0xbe,
	0x39, 0xbf, 0xdf, 0x1c, 0x1b, 0xfa, 0x22, 0xe7, 0x84, 0x4a, 0x71, 0x9e, 0x73, 0x26, 0x19, 0xb2,
	0xf3, 0x65, 0xe0, 0x42, 0x67, 0xba, 0xc9, 0xe5, 0xfb, 0x20, 0x84, 0xa3, 0xab, 0x25, 0xe3, 0xf2,
	0x16, 0x0b, 0x11, 0xaf, 0x30, 0xf2, 0xc1, 0xdd, 0x94, 0x47, 0xdf, 0x3a, 0xb5, 0x42, 0x2f, 0xda,
	0x8a, 0xc1, 0x8f, 0x70, 0x18, 0xc5, 0x09, 0x46, 0x63, 0x70, 0xf3, 0x2c, 0x7e, 0x8f, 0xb9, 0xf0,
	0xad, 0xd3, 0x83, 0xb0, 0x77, 0x09, 0xe7, 0xf9, 0xf2, 0xfc, 0x67, 0xad, 0x8a, 0xb6, 0x26, 0xf4,
	0x19, 0x78, 0x29, 0x16, 0xf2, 0x2e, 0xce, 0x0a, 0xec, 0xdb, 0xa7, 0x56, 0xd8, 0x8f, 0x6a, 0x45,
	0xf0, 0x2b, 0xf4, 0x5e, 0xe2, 0x7b, 0x42, 0x71, 0xaa, 0x5d, 0x7e, 0x05, 0x03, 0x1e, 0x27, 0x58,
	0x44, 0x78, 0x13, 0x13, 0x4a, 0xe8, 0x4a, 0xc7, 0xee, 0x47, 0x2d, 0x2d, 0x7a, 0x06, 0x4e, 0xe9,
	0xdf, 0xb7, 0x75, 0xe4, 0x8f, 0x55, 0xe4, 0xca, 0x51, 0x95, 0x40, 0x05, 0x08, 0xbe, 0x06, 0x37,
	0xc2, 0xa2, 0xc8, 0xa4, 0x40, 0x01, 0x38, 0x5c, 0x1f, 0xcd, 0x7c, 0x4b, 0x63, 0x54, 0x59, 0x82,
	0x25, 0x38, 0xa5, 0x46, 0xa1, 0xab, 0x18, 0x2a, 0x87, 0x66, 0x75, 0x95, 0x05, 0x7d, 0xba, 0xf3,
	0xa8, 0x2a, 0xb3, 0xb7, 0x5e, 0x9a, 0x45, 0x1f, 0xb4, 0x8b, 0xfe, 0x1e, 0x7a, 0x0b, 0x56, 0x70,
	0x1a, 0x6f, 0x30, 0x95, 0x02, 0x9d, 0x03, 0xc8, 0x9d, 0x58, 0xa5, 0x36, 0x50, 0xc1, 0x6a, 0x50,
	0x64, 0x20, 0x82, 0xa7, 0x70, 0x5c, 0x5b, 0x66, 0xf1, 0x06, 0x0b, 0x84, 0xe0, 0x50, 0x89, 0xfa,
	0xb2, 0x17, 0xe9, 0x73, 0x30, 0x86, 0x41, 0x0d, 0x9b, 0xe7, 0x38, 0x31, 0x50, 0xd6, 0x0e, 0xf5,
	0x9b, 0x05, 0xfd, 0x46, 0xe3, 0xd0, 0x09, 0x74, 0x12, 0x96, 0x31, 0x5e, 0xc1, 0x4a, 0xe1, 0x91,
	0xc9, 0xd8, 0x8f, 0x4e, 0xe6, 0x3b, 0x38, 0x66, 0x72, 0x8d, 0xf9, 0x84, 0x51, 0x89, 0x69, 0xaa,
	0xc8, 0x71, 0xb0, 0x6f, 0x44, 0x6d, 0x64, 0x90, 0x01, 0x94, 0xcd, 0xd7, 0xe9, 0x06, 0xe0, 0xac,
	0xb4, 0x41, 0x67, 0x32, 0x28, 0x07, 0x70, 0xa3, 0x35, 0x51, 0x65, 0x51, 0x25, 0x65, 0xb1, 0x90,
	0x55, 0x32, 0xfa, 0xac, 0x52, 0x95, 0x8d, 0xfe, 0xe8, 0x09, 0x78, 0x51, 0x4b, 0x1b, 0xfc, 0x00,
	0x4e, 0x55, 0xf2, 0x23, 0x8d, 0x31, 0xa2, 0xdb, 0xfb, 0xa2, 0x07, 0x17, 0xe0, 0xce, 0x65, 0xcc,
	0x25, 0xe6, 0x68, 0x0c, 0xfd, 0x84, 0x15, 0x54, 0xa6, 0xec, 0x81, 0x2e, 0x48, 0xe5, 0xab, 0x1f,
	0x35, 0x95, 0xc1, 0x15, 0x74, 0x14, 0xcf, 0xb9, 0x22, 0x48, 0x49, 0xa1, 0x59, 0xb1, 0xa9, 0xa0,
	0xb5, 0x02, 0x8d, 0xa0, 0x9b, 0x12, 0x21, 0x63, 0x9a, 0x6c, 0x9f, 0xcc, 0x4e, 0x0e, 0xfe, 0xb4,
	0x00, 0xea, 0xb9, 0x3e, 0x9a, 0xfa, 0xbf, 0xb2, 0x0f, 0x3d, 0x87, 0xc3, 0x0d, 0x4b, 0xb1, 0x7f,
	0xa8, 0xcb, 0xfa, 0xbc, 0x49, 0x34, 0xe3, 0x78, 0xcb, 0x52, 0x1c, 0x69, 0x28, 0x3a, 0x85, 0x5e,
	0x99, 0xdc, 0x44, 0x55, 0xe3, 0x77, 0xb4, 0x4b, 0x53, 0x55, 0x93, 0xc6, 0xd1, 0x0c, 0xac, 0x48,
	0x53, 0x3f, 0x38, 0x77, 0xef, 0x83, 0x0b, 0x4d, 0x9a, 0xaa, 0x98, 0xe8, 0x08, 0xba, 0x2f, 0x5f,
	0xcf, 0x17, 0x57, 0xb3, 0xc9, 0x74, 0xf8, 0x11, 0xea, 0xc2, 0xe1, 0xe2, 0xf5, 0xed, 0x74, 0x68,
	0x05, 0x7f, 0x59, 0x30, 0xbc, 0x23, 0x62, 0xc2, 0xe8, 0x3d, 0x59, 0x15, 0x3c, 0x96, 0x84, 0x51,
	0xd5, 0xaa, 0x35, 0x13, 0xe5, 0x98, 0xcb, 0x1e, 0xec, 0x64, 0xb5, 0xc2, 0xde, 0x11, 0xa1, 0x4d,
	0x76, 0xb9, 0xc2, 0x2a, 0x11, 0x3d, 0x01, 0xb8, 0x2f, 0xb2, 0x4c, 0x24, 0x1c, 0x63, 0xaa, 0x5b,
	0xd4, 0x8d, 0x0c, 0x0d, 0x0a, 0xe1, 0x98, 0x63, 0xc1, 0xb2, 0x42, 0xc5, 0xf8, 0x85, 0xa4, 0x72,
	0xad, 0xdb, 0xd5, 0x8f, 0xda, 0x6a, 0x74, 0x06, 0xc3, 0x5a, 0xf5, 0x0a, 0x93, 0xd5, 0x7a, 0xdb,
	0x9f, 0x7f, 0xe8, 0x55, 0xd4, 0x0d, 0x7b, 0x47, 0xe8, 0xea, 0x2d, 0x25, 0xd2, 0x77, 0x34, 0xca,
	0xd0, 0x28, 0xbb, 0x1a, 0xf3, 0x75, 0x9c, 0x48, 0xc6, 0x7d, 0xb7, 0xb4, 0xd7, 0x9a, 0xb3, 0x67,
	0xe0, 0x94, 0x04, 0x54, 0x4d, 0xb9, 0xbd, 0x7a, 0xa3, 0xda, 0x03, 0xe0, 0x5c, 0x4f, 0xf5, 0xd9,
	0x42, 0x1e, 0x74, 0x7e, 0x5a, 0xbc, 0x9a, 0x46, 0x43, 0xfb, 0xf2, 0xf7, 0x03, 0x70, 0xe7, 0xe5,
	0xb2, 0x47, 0x17, 0xd0, 0x9f, 0xe1, 0x07, 0x83, 0x33, 0xad, 0xe5, 0x32, 0x6a, 0xc9, 0xe8, 0x09,
	0xb8, 0x33, 0xfc, 0xa0, 0x17, 0x72, 0x57, 0x4f, 0x2c, 0x4e, 0xf0, 0xc8, 0x53, 0x27, 0xfd, 0xa9,
	0x40, 0x63, 0xf0, 0x34, 0xed, 0x35, 0xa2, 0xa7, 0xf4, 0xd5, 0x2b, 0x18, 0x19, 0x3b, 0x12, 0x85,
	0xe0, 0xe9, 0x0f, 0x8a, 0x46, 0x0d, 0x95, 0xc1, 0xfc, 0xbe, 0x98, 0xfe, 0x2e, 0xe0, 0x68, 0x3b,
	0x54, 0x7c, 0x47, 0x04, 0x3a, 0x51, 0xa6, 0xf6, 0xa4, 0xcd, 0x0b, 0x67, 0x00, 0x37, 0x58, 0x6e,
	0xd7, 0xfa, 0xa0, 0x66, 0x95, 0xda, 0x1b, 0x23, 0x83, 0x65, 0xdf, 0x58, 0xe8, 0x05, 0xa0, 0x1b,
	0x2c, 0xdb, 0x0b, 0xb3, 0x76, 0x36, 0xfa, 0xa4, 0x59, 0x7d, 0x69, 0x7f, 0x0e, 0x27, 0x37, 0x58,
	0x4e, 0x0a, 0xce, 0x31, 0x35, 0x2e, 0x9b, 0xf7, 0xda, 0x5d, 0x7b, 0x01, 0x83, 0x37, 0x2c, 0x4e,
	0xcd, 0xb7, 0xd9, 0x44, 0xe8, 0xe4, 0xda, 0xb7, 0x42, 0xe8, 0xcd, 0xd7, 0xec, 0x61, 0x5f, 0x2d,
	0x75, 0xbc, 0xcb, 0x3f, 0x6c, 0x70, 0xee, 0x88, 0x28, 0xe2, 0x0c, 0x9d, 0x7d, 0x68, 0xa2, 0x46,
	0xaf, 0x3e, 0x34, 0xcc, 0x2f, 0xf7, 0x0e, 0xd3, 0x00, 0xfd, 0xf7, 0x59, 0x8e, 0x01, 0xde, 0xe6,
	0x69, 0x2c, 0xb1, 0x86, 0x7a, 0xdb, 0x88, 0xa6, 0xb7, 0xd0, 0x52, 0xa8, 0x6b, 0x42, 0x89, 0x58,
	0xd7, 0x51, 0xab, 0x0e, 0x98, 0xbe, 0x9e, 0x36, 0x7b, 0xb3, 0x0f, 0xf6, 0xbf, 0xe9, 0xf3, 0x85,
	0x5a, 0xdb, 0x2c, 0x57, 0x58, 0x63, 0x9e, 0xf5, 0x71, 0xe9, 0xe8, 0xff, 0xa3, 0x6f, 0xff, 0x0e,
	0x00, 0x00, 0xff, 0xff, 0xf7, 0x5c, 0xf1, 0xd7, 0x30, 0x09, 0x00, 0x00,
}
