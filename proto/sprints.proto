syntax = "proto3";

package pb;

// server & client interface
service Sprints {
    rpc NewTournament(Tournament) returns (Tournament);
    rpc NewRace(Race) returns (Empty);
    rpc StartRace(Empty) returns (Empty);
    rpc AbortRace(Empty) returns (Empty);
    rpc ConfigureVis(VisConfiguration) returns (Empty);
}

// client only interface 
service Races {
    rpc UpdateRace(stream Racer) returns (Empty);
    rpc FinishRace(Empty) returns (Empty);
}

message Empty {}

message Race {
    repeated Player players = 1; 
    Tournament tournament = 2;
    uint32 destValue = 3;
}

message DefinedRace {
    // how many races are remaining before this one will take place
    uint32 racesRemaining = 1;    
    repeated DefinedPlayer player = 2;
}

message DefinedPlayer {
    string color = 1;
    uint32 racesRemaining = 2;
    repeated DefinedPlayer otherContenders = 3;
}


message Player {
    string name = 1;
    Gender gender = 2;

    enum Gender {
        MALE = 0;
        FEMALE = 1;
        OTHER = 2;
    }
}

message Racer {
    uint32 playerNum = 1;
    uint32 distance = 2;
}

message Tournament {
    string name = 1;
    uint32 destValue = 3;
    TournamentMode mode = 4;
    uint32 playerCount = 5;
    repeated string color = 6;

    enum TournamentMode {
        DISTANCE = 0;
        TIME = 1;
    }
}

message VisConfiguration {
    string hostName = 1; 
    string visName = 2;
    bool fullscreen = 3;
    uint32 resolutionWidth = 4;
    uint32 resolutionHeight = 5;
    uint32 movingUnit = 6;
}
